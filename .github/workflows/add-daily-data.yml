name: Add Daily Data

on:
  schedule:
    - cron: "*/15 15-23 * * 1-5"  # Runs every 15 minutes from 3 PM to 11 PM, Monday-Friday
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo content
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' #install the python needed
      - name: install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./src/data/script/requirements.txt
      - name: update stock data
        id: update-data
        env:
          TWELVEDATA_API_KEY: ${{ secrets.TWELVEDATA_API_KEY }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        run: |
          python3 ./src/data/script/daily_update.py

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet && git diff --staged --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          git commit -m "Update stocks data [automated]"
          git pull --rebase 
          sleep 5
          for i in {1..10}; do
            git push && break || echo "Push failed, retrying ($i/10)..."
            sleep 6
            git pull --rebase 
          done
          git push

      - name: Setup Node.js
        if: steps.check-changes.outputs.has-changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install npm dependencies
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          npm install

      - name: Run daily email simulation
        if: steps.check-changes.outputs.has-changes == 'true'
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        run: |
          npx tsx standalone-simulation-email.ts
